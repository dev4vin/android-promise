<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2017, Peter Vincent
  ~ Licensed under the Apache License, Version 2.0, Promise.
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project name="promise" default="all">
  
  
  <property file="promise.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*.yarb/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.swc"/>
    <include name="*.zip"/>
    <include name="*.egg"/>
    <include name="*.ane"/>
    <include name="*.jar"/>
    <include name="*.ear"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
    <exclude name="**/?*.aj"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.android_api_27_platform" value="${jdk.home.android_api_27_platform}/../../../../usr/lib/jvm/jdk1.8.0_121/bin"/>
  <path id="jdk.classpath.android_api_27_platform">
    <fileset dir="${jdk.home.android_api_27_platform}">
      <include name="platforms/android-27/android.jar"/>
      <include name="platforms/android-27/data/res"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.android_api_27_platform}"/>
  <property name="project.jdk.bin" value="${jdk.bin.android_api_27_platform}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.android_api_27_platform"/>
  
  
  <!-- Project Libraries -->
  
  <path id="library.libs.classpath">
    <pathelement location="${basedir}/libs/AndroidEasingFunctions-1.0.0.jar"/>
    <pathelement location="${basedir}/libs/AndroidViewAnimations-1.1.3.jar"/>
    <pathelement location="${basedir}/libs/NineOldAndroid-2.4.0.jar"/>
  </path>
  
  <path id="library.libs1.classpath">
    <pathelement location="${basedir}/build/intermediates/bundles/debug/libs/AndroidEasingFunctions-1.0.0.jar"/>
    <pathelement location="${basedir}/build/intermediates/bundles/debug/libs/AndroidViewAnimations-1.1.3.jar"/>
    <pathelement location="${basedir}/build/intermediates/bundles/debug/libs/NineOldAndroid-2.4.0.jar"/>
  </path>
  <!-- Register Custom Compiler Taskdefs -->
  <property name="javac2.home" value="${idea.home}/lib"/>
  <path id="javac2.classpath">
    <fileset dir="${javac2.home}">
      <include name="javac2.jar"/>
      <include name="jdom.jar"/>
      <include name="asm-all*.jar"/>
      <include name="jgoodies-forms.jar"/>
    </fileset>
  </path>
  <target name="register.custom.compilers">
    <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath"/>
    <taskdef name="instrumentIdeaExtensions" classname="com.intellij.ant.InstrumentIdeaExtensions" classpathref="javac2.classpath"/>
  </target>
  
  <!-- Modules -->
  
  
  <!-- Module buildConfig -->
  
  <dirname property="module.buildconfig.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.buildconfig" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.buildconfig" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.buildconfig" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.buildconfig" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="buildconfig.output.dir" value="${module.buildconfig.basedir}/out/production/buildConfig"/>
  <property name="buildconfig.testoutput.dir" value="${module.buildconfig.basedir}/out/test/buildConfig"/>
  
  <path id="buildconfig.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="buildconfig.module.production.classpath">
    <path refid="${module.jdk.classpath.buildconfig}"/>
  </path>
  
  <path id="buildconfig.runtime.production.module.classpath">
    <pathelement location="${buildconfig.output.dir}"/>
  </path>
  
  <path id="buildconfig.module.classpath">
    <path refid="${module.jdk.classpath.buildconfig}"/>
    <pathelement location="${buildconfig.output.dir}"/>
  </path>
  
  <path id="buildconfig.runtime.module.classpath">
    <pathelement location="${buildconfig.testoutput.dir}"/>
    <pathelement location="${buildconfig.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.buildconfig">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.buildconfig">
    <patternset refid="excluded.from.module.buildconfig"/>
  </patternset>
  
  <path id="buildconfig.module.sourcepath">
    <dirset dir="${module.buildconfig.basedir}/build/generated/source/buildConfig">
      <include name="debug"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.buildconfig" depends="compile.module.buildconfig.production,compile.module.buildconfig.tests" description="Compile module buildConfig"/>
  
  <target name="compile.module.buildconfig.production" depends="register.custom.compilers" description="Compile module buildConfig; production classes">
    <mkdir dir="${buildconfig.output.dir}"/>
    <javac2 destdir="${buildconfig.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.buildconfig}/javac">
      <compilerarg line="${compiler.args.buildconfig}"/>
      <bootclasspath refid="buildconfig.module.bootclasspath"/>
      <classpath refid="buildconfig.module.production.classpath"/>
      <src refid="buildconfig.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.buildconfig"/>
    </javac2>
    
    <copy todir="${buildconfig.output.dir}">
      <fileset dir="${module.buildconfig.basedir}/build/generated/source/buildConfig/debug">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.buildconfig.tests" depends="register.custom.compilers,compile.module.buildconfig.production" description="compile module buildConfig; test classes" unless="skip.tests"/>
  
  <target name="clean.module.buildconfig" description="cleanup module">
    <delete dir="${buildconfig.output.dir}"/>
    <delete dir="${buildconfig.testoutput.dir}"/>
  </target>
  
  
  <!-- Module debug -->
  
  <dirname property="module.debug.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.debug" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.debug" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.debug" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.debug" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="debug.output.dir" value="${module.debug.basedir}/out/production/debug"/>
  <property name="debug.testoutput.dir" value="${module.debug.basedir}/out/test/debug"/>
  
  <path id="debug.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="debug.module.production.classpath">
    <path refid="${module.jdk.classpath.debug}"/>
  </path>
  
  <path id="debug.runtime.production.module.classpath">
    <pathelement location="${debug.output.dir}"/>
  </path>
  
  <path id="debug.module.classpath">
    <path refid="${module.jdk.classpath.debug}"/>
    <pathelement location="${debug.output.dir}"/>
  </path>
  
  <path id="debug.runtime.module.classpath">
    <pathelement location="${debug.testoutput.dir}"/>
    <pathelement location="${debug.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.debug">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.debug">
    <patternset refid="excluded.from.module.debug"/>
  </patternset>
  
  <path id="debug.module.sourcepath">
    <dirset dir="${module.debug.basedir}/build/intermediates/manifests/full/debug">
      <include name="gen"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.debug" depends="compile.module.debug.production,compile.module.debug.tests" description="Compile module debug"/>
  
  <target name="compile.module.debug.production" depends="register.custom.compilers" description="Compile module debug; production classes">
    <mkdir dir="${debug.output.dir}"/>
    <javac2 destdir="${debug.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.debug}/javac">
      <compilerarg line="${compiler.args.debug}"/>
      <bootclasspath refid="debug.module.bootclasspath"/>
      <classpath refid="debug.module.production.classpath"/>
      <src refid="debug.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.debug"/>
    </javac2>
    
    <copy todir="${debug.output.dir}">
      <fileset dir="${module.debug.basedir}/build/intermediates/manifests/full/debug/gen">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.debug.tests" depends="register.custom.compilers,compile.module.debug.production" description="compile module debug; test classes" unless="skip.tests"/>
  
  <target name="clean.module.debug" description="cleanup module">
    <delete dir="${debug.output.dir}"/>
    <delete dir="${debug.testoutput.dir}"/>
  </target>
  
  
  <!-- Module main -->
  
  <dirname property="module.main.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.main" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.main" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.main" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.main" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="main.output.dir" value="${module.main.basedir}/out/production/main"/>
  <property name="main.testoutput.dir" value="${module.main.basedir}/out/test/main"/>
  
  <path id="main.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="main.module.production.classpath">
    <path refid="${module.jdk.classpath.main}"/>
    <path refid="library.libs1.classpath"/>
    <path refid="library.libs.classpath"/>
  </path>
  
  <path id="main.runtime.production.module.classpath">
    <pathelement location="${main.output.dir}"/>
    <path refid="library.libs1.classpath"/>
    <path refid="library.libs.classpath"/>
  </path>
  
  <path id="main.module.classpath">
    <path refid="${module.jdk.classpath.main}"/>
    <pathelement location="${main.output.dir}"/>
    <path refid="library.libs1.classpath"/>
    <path refid="library.libs.classpath"/>
  </path>
  
  <path id="main.runtime.module.classpath">
    <pathelement location="${main.testoutput.dir}"/>
    <pathelement location="${main.output.dir}"/>
    <path refid="library.libs1.classpath"/>
    <path refid="library.libs.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.main">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.main">
    <patternset refid="excluded.from.module.main"/>
  </patternset>
  
  <path id="main.module.sourcepath">
    <dirset dir="${module.main.basedir}/src/main">
      <include name="java"/>
      <include name="gen"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.main" depends="compile.module.main.production,compile.module.main.tests" description="Compile module main"/>
  
  <target name="compile.module.main.production" depends="register.custom.compilers" description="Compile module main; production classes">
    <mkdir dir="${main.output.dir}"/>
    <javac2 destdir="${main.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.main}/javac">
      <compilerarg line="${compiler.args.main}"/>
      <bootclasspath refid="main.module.bootclasspath"/>
      <classpath refid="main.module.production.classpath"/>
      <src refid="main.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.main"/>
    </javac2>
    
    <copy todir="${main.output.dir}">
      <fileset dir="${module.main.basedir}/src/main/java">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.main.basedir}/src/main/gen">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.main.tests" depends="register.custom.compilers,compile.module.main.production" description="compile module main; test classes" unless="skip.tests"/>
  
  <target name="clean.module.main" description="cleanup module">
    <delete dir="${main.output.dir}"/>
    <delete dir="${main.testoutput.dir}"/>
  </target>
  
  
  <!-- Module r -->
  
  <dirname property="module.r.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.r" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.r" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.r" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.r" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="r.output.dir" value="${module.r.basedir}/out/production/r"/>
  <property name="r.testoutput.dir" value="${module.r.basedir}/out/test/r"/>
  
  <path id="r.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="r.module.production.classpath">
    <path refid="${module.jdk.classpath.r}"/>
  </path>
  
  <path id="r.runtime.production.module.classpath">
    <pathelement location="${r.output.dir}"/>
  </path>
  
  <path id="r.module.classpath">
    <path refid="${module.jdk.classpath.r}"/>
    <pathelement location="${r.output.dir}"/>
  </path>
  
  <path id="r.runtime.module.classpath">
    <pathelement location="${r.testoutput.dir}"/>
    <pathelement location="${r.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.r">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.r">
    <patternset refid="excluded.from.module.r"/>
  </patternset>
  
  <path id="r.module.sourcepath">
    <dirset dir="${module.r.basedir}/build/generated/source/r">
      <include name="debug"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.r" depends="compile.module.r.production,compile.module.r.tests" description="Compile module r"/>
  
  <target name="compile.module.r.production" depends="register.custom.compilers" description="Compile module r; production classes">
    <mkdir dir="${r.output.dir}"/>
    <javac2 destdir="${r.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.r}/javac">
      <compilerarg line="${compiler.args.r}"/>
      <bootclasspath refid="r.module.bootclasspath"/>
      <classpath refid="r.module.production.classpath"/>
      <src refid="r.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.r"/>
    </javac2>
    
    <copy todir="${r.output.dir}">
      <fileset dir="${module.r.basedir}/build/generated/source/r/debug">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.r.tests" depends="register.custom.compilers,compile.module.r.production" description="compile module r; test classes" unless="skip.tests"/>
  
  <target name="clean.module.r" description="cleanup module">
    <delete dir="${r.output.dir}"/>
    <delete dir="${r.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.buildconfig, clean.module.debug, clean.module.main, clean.module.r" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.buildconfig, compile.module.debug, compile.module.main, compile.module.r" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>